I"–<p>Over the weekend I watched the quick <a href="https://www.deeplearning.ai/short-courses/chatgpt-prompt-engineering-for-developers/">course</a> put out by Andrew Ng and Isa Fulford about ChatGPT Prompt Engineering for developers. In the video series, they showed a lot of examples that inspired me to come up with my own application ideas, so I definitely recommend watching the course. It took me around 2 hours to finish the whole series. Below are notes for quick reference and reminders.</p>

<h3 id="types-of-llms">Types of LLMs</h3>

<p><strong>Base LLM vs Instruction Tuned LLM</strong></p>

<ul>
  <li>
    <p>Base LLM: predicts next word, based on text training data</p>

    <ul>
      <li>
        <p>Example:</p>

        <ul>
          <li>
            <p>Input: What is the capital of France?</p>
          </li>
          <li>
            <p>Output: What is Franceâ€™s largest city? What is Franceâ€™s population?</p>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>Instruction Tuned LLM: tires to follow instructions</p>

    <ul>
      <li>
        <p>Example:</p>

        <ul>
          <li>
            <p>Input: What is the capital of France?</p>
          </li>
          <li>
            <p>Output: The capital of France is Paris.</p>
          </li>
        </ul>
      </li>
      <li>
        <p>Start off with a base LLM thatâ€™s been trained on a huge amount of text data and further fine tune it with inputs and outputs that are instructions and good attempts to follow these instructions</p>
      </li>
      <li>
        <p>Then further refined by RLHF -&gt; Reinforcement learning with human feedback</p>
      </li>
      <li>
        <p>Recommended for most applications to be deveoped</p>
      </li>
    </ul>
  </li>
</ul>

<h3 id="guideline-for-prompting">Guideline for Prompting</h3>

<p><strong>First principle</strong>: give clear and specific instructions</p>

<ul>
  <li>
    <p>Clear \(\neq\) Short</p>
  </li>
  <li>
    <p>Tactic 1: Use delimiters to clearly indicate distinct parts of the input</p>

    <ul>
      <li>
        <p>Delimiters examples: ```, â€œâ€œâ€œ, &lt;&gt;, &lt;tag&gt; &lt;/tag&gt;, : , â€”</p>
      </li>
      <li>
        <p>Helps avoid prompt injections as well</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Tactic 2: Ask for a structured output (i.e. JSON, HTML)</p>
  </li>
  <li>
    <p>Tactic 3: Ask the model to check whether conditions are satisfied</p>
  </li>
  <li>
    <p>Tactic 4: Few-shot prompting -&gt; Give successful examples of completing tasks then ask model to perform the task</p>
  </li>
</ul>

<p><strong>Second principle</strong>: give the model time to think</p>

<ul>
  <li>
    <p>Tactic 1: Specify the steps required to complete a task and ask for output in a specified format</p>
  </li>
  <li>
    <p>Tactic 2: Instruct the model to work out its own solution before rushing to a conclusion</p>
  </li>
</ul>

<p>Model Limitations:</p>

<ul>
  <li>
    <p>Hallucination: makes statements that sound plausible but are not true</p>

    <ul>
      <li>Reducing hallucinations: first find relevant information, then answer the question based on the relevant information</li>
    </ul>
  </li>
</ul>

<h2 id="iterative-prompt-development">Iterative Prompt Development</h2>

<p>Prompt guidelines</p>

<ul>
  <li>
    <p>Be clear and specific the first time</p>
  </li>
  <li>
    <p>Analyze why result does not give desired output</p>
  </li>
  <li>
    <p>Clarify instructions, give more time to think</p>
  </li>
  <li>
    <p>Refine the idea and the prompt with a batch of examples -&gt; build on the initial prompt</p>
  </li>
  <li>
    <p>Repeat</p>
  </li>
</ul>

<h2 id="summarizing">Summarizing</h2>

<ul>
  <li>
    <p>Could ask the model to summarize with specific requirements such as word limits and focus area.</p>
  </li>
  <li>
    <p>Could also extract instead of summarize (summarize may include more information than asked for)</p>
  </li>
  <li>
    <p>Could put a list of similar texts in a list and use a loop to iterate through the list to do the same type of summarizing</p>
  </li>
</ul>

<h2 id="inferring">Inferring</h2>

<ul>
  <li>
    <p>Given a paragraph, infer emotions, or answer questions with specific requirements</p>
  </li>
  <li>
    <p>Infer topics and could also determine if the text talks about a certain topic</p>
  </li>
</ul>

<h2 id="transforming">Transforming</h2>

<ul>
  <li>
    <p>Can be used to do common transformation tasks such as translation, language detection</p>
  </li>
  <li>
    <p>Could build a universal translator by iterating through messages in different languages in a loop</p>
  </li>
  <li>
    <p>Could do tone transformation, format conversion (HTML -&gt; JSON, etc.)</p>
  </li>
  <li>
    <p>Could use spellcheck/grammar check</p>

    <ul>
      <li>
        <p>Cool library to use to display the edited version with red lines indicating the changes from the original version:</p>

        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  from redlines import Redlines
</code></pre></div>        </div>

        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  diff = Redlines(text, response)
</code></pre></div>        </div>

        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  display(Markdown(diff.output_markdown))
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h2 id="expanding">Expanding</h2>

<ul>
  <li>
    <p>Could expand on existing content based on prompt</p>
  </li>
  <li>
    <p>Temperature: degree of exploration or randomness of the model</p>

    <ul>
      <li>
        <p>Temperature = 0: the model will always choose the most likely next word</p>
      </li>
      <li>
        <p>Temperature higher: will choose more of the less likely next word</p>
      </li>
    </ul>
  </li>
</ul>

<h2 id="chatbot">Chatbot</h2>

<ul>
  <li>
    <p>Build your own chatbot: instead of only giving ChatGPT one message at a time, give it multiple messages and specify roles in JSON format:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  messages = [{'role': 'system', 'content': 'You are a friendly chatbot.'}, {'role': 'user', 'content': 'tell me a joke'}, {'role': 'assistant', 'content': 'Why did the chicken cross the road'}, {'role':'user', 'content': Â 'i don\'t know'} ]
</code></pre></div>    </div>
  </li>
  <li>
    <p>Add context -&gt; write a helper function that automatically collects context and add input and output responses from the user and chatbot interaction (i.e. adding to the messages list)</p>
  </li>
</ul>
:ET